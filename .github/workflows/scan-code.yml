name: SFDX Code Scan Overall

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Run SFDX Scanner
        run: |
          sf scanner:run --target "force-app/main/default/classes/**/*.cls,force-app/main/default/lwc" --format "csv" --outfile "scanner-report.csv"
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'

      - name: Encode CSV file to Base64
        id: encode_file
        run: |
          base64 scanner-report.csv | tr -d '\n' > encoded_report.txt

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Upload CSV Report to Salesforce
        run: |
          # Make sure the SF_ACCESS_TOKEN is not empty
          if [ -z "${{ secrets.SF_ACCESS_TOKEN }}" ]; then
            echo "Error: SF_ACCESS_TOKEN is not available."
            exit 1
          fi

          # Make the POST request to upload the ContentVersion
          contentDocumentResponse=$(curl -X POST https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
          -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"Title\": \"Scanner Report\",
            \"PathOnClient\": \"scanner-report.csv\",
            \"VersionData\": \"$(cat encoded_report.txt)\"
          }")

          # Log the full response for debugging
          echo "Full Response: $contentDocumentResponse"

          # Check if the response is an array or object
          if [[ $contentDocumentResponse == \[*\] ]]; then
            echo "Error: Received an array, expected an object. Here's the response:"
            echo "$contentDocumentResponse"
            exit 1
          fi

          # Extract contentVersionId correctly from the response
          contentVersionId=$(echo $contentDocumentResponse | jq -r '.id')
          if [ -z "$contentVersionId" ]; then
            echo "Error: Failed to upload file. No ContentVersionId found."
            exit 1
          fi
          echo "ContentVersionId: $contentVersionId"

          # Fetch the ContentDocumentId based on the ContentVersionId
          contentDocumentResponse=$(curl -X GET https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
          -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")

          # Log full response for ContentDocumentId
          echo "ContentDocument Response: $contentDocumentResponse"

          # Extract ContentDocumentId correctly
          contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
          if [ -z "$contentDocumentId" ]; then
            echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
            exit 1
          fi
          echo "ContentDocumentId: $contentDocumentId"

        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash
