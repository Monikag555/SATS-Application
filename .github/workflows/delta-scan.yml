name: SFDX Code Scan Delta

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files
        id: get-changes
        run: |
          # Fetch all commits to ensure we can reference HEAD~1
          git fetch --unshallow || true
          
          # Check if there is more than one commit
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changed_files.txt

      - name: Run SFDX Scanner on Changed Files
        if: success()
        run: |
          files=$(cat changed_files.txt | grep -E '\.cls$|\.lwc$' || true)
          if [ -n "$files" ]; then
            sf scanner:run --target "$files" --format "csv" --outfile "scanner-report.csv"
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'

      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          base64 scanner-report.csv | tr -d '\n' > encoded_report.txt

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          # Read encoded report content
          encoded_data=$(cat encoded_report.txt)
          
          # Prepare request payload
          payload=$(cat <<EOF
          {
            "Title": "Scanner Report",
            "PathOnClient": "scanner-report.csv",
            "VersionData": "$encoded_data"
          }
        EOF
          )

          # Make the API request to upload the file
          contentDocumentResponse=$(curl -X POST https://sprintparksolutionspvtltd-dev-ed.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$payload")

          # Log the full response
          echo "contentDocument Response: $contentDocumentResponse"

          # Extract ContentVersionId from the response
          contentVersionId=$(echo $contentDocumentResponse | jq -r '.id')
          if [ -z "$contentVersionId" ]; then
            echo "Error: Failed to upload file. No ContentVersionId found."
            exit 1
          fi
          echo "ContentVersionId: $contentVersionId"

        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash
