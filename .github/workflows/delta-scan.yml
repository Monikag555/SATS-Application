name: SFDX Code Scan Delta

#delta

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
      - name: Verify SFDX CLI Installation
        run: sf --version
      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core
      - name: Get changed files
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changed_files.txt
      - name: Run SFDX Scanner on Changed Files
        if: success()
        run: |
          files=$(cat changed_files.txt | grep -E '\.cls$|\.lwc$' || true)
          echo "Files to scan: $files"
          if [ -n "$files" ]; then
            sf scanner:run --target "$files" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed"; exit 1; }
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'
      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f scanner-report.csv ]; then
            base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Scanner report CSV file not found."
            exit 1
          fi
      - name: Install jq
        if: success()
        run: sudo apt-get install -y jq
      - name: Upload CSV Report to Salesforce
        run: |
          # Check if encoded report file exists
          if [ -s encoded_report.txt ]; then
            echo "Encoded report file found."
      
            # Assign GitHub secret (Salesforce token) to a local variable
            SF_ACCESS_TOKEN_VAR=${{ secrets.SF_ACCESS_TOKEN }}
      
            # Optional: Debugging to check if the token has been set
            echo "Token length: ${#SF_ACCESS_TOKEN_VAR}"
      
            # Make the API request using the token
            contentDocumentResponse=$(curl -X POST https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v58.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN_VAR" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "Scanner Report Delta",
                "PathOnClient": "scanner-report.csv",
                "VersionData": "'"$(cat encoded_report.txt)"'"
              }')
      
            # Log the response
            echo "Response: $contentDocumentResponse"
            
            # Parse the response to get contentVersionId using jq
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            
            # Fetch additional data using the contentVersionId
            contentDocumentResponse=$(curl -X GET https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v58.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer $SF_ACCESS_TOKEN_VAR")
            
            # Log the contentDocumentResponse
            echo "ContentDocument Response: $contentDocumentResponse"
            
            # Parse the response to get contentDocumentId
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No scanner report generated, skipping upload."
          fi
        env:
          # Pass SF_ACCESS_TOKEN as an environment variable
          SF_ACCESS_TOKEN_VAR: ${{ secrets.SF_ACCESS_TOKEN }}
      