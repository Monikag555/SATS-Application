name: SFDX Code Scan

#sfdx
on:
  push:
    branches:
      - main
      - '**'

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
      - name: Verify SFDX CLI Installation
        run: sf --version
      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core
      - name: sgd plugin installation  
        run: sf plugins install sfdx-git-delta
      - name: Identify Changed Files
        id: delta_changes
        run: |
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" > changed_files.txt
          if [ ! -s changed_files.txt ]; then
            echo "No files changed, skipping delta scan."
            exit 0
          fi
          echo "Changed files:"
          cat changed_files.txt
      - name: Run SFDX Scanner for Overall Code
        run: |
          sf scanner:run --target "force-app/main/default/classes/**/*.cls,force-app/main/default/lwc" --format "csv" --outfile "scanner-report.csv"
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'
      - name: Run SFDX Scanner for Delta Changes
        run: |
          # Run scanner on the files identified as changed
          changed_files=$(cat changed_files.txt | grep -E '\.cls$|\.js$|\.html$')
          if [ -z "$changed_files" ]; then
            echo "No relevant files changed, skipping delta scan."
            exit 0
          fi
          sf scanner:run --target "$changed_files" --format "csv" --outfile "delta-changes-report.csv"
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'
      - name: Encode CSV files to Base64
        id: encode_files
        run: |
          base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          if [ -f delta-changes-report.csv ]; then
            base64 delta-changes-report.csv | tr -d '\n' > encoded_delta_report.txt
          fi
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Upload Overall CSV Report to Salesforce
        run: |
          contentDocumentResponse=$(curl -X POST https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "Title": "Scanner Report",
              "PathOnClient": "scanner-report.csv",
              "VersionData": "'"$(cat encoded_report.txt)"'"
            }')
          echo "Response: $contentDocumentResponse"
          
          contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
          if [ -z "$contentVersionId" ]; then
            echo "Error: Failed to upload file. No ContentVersionId found."
            exit 1
          fi
          echo "ContentVersionId: $contentVersionId"
          
          contentDocumentResponse=$(curl -X GET https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
          echo "ContentDocument Response: $contentDocumentResponse"
          
          contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
          if [ -z "$contentDocumentId" ]; then
            echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
            exit 1
          fi
          echo "ContentDocumentId: $contentDocumentId"
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash
      - name: Upload Delta Changes CSV Report to Salesforce
        if: steps.encode_files.outputs.encoded_delta_report != ''
        run: |
          contentDocumentResponse=$(curl -X POST https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "Title": "Delta Changes Report",
              "PathOnClient": "delta-changes-report.csv",
              "VersionData": "'"$(cat encoded_delta_report.txt)"'"
            }')
          echo "Response: $contentDocumentResponse"
          
          contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
          if [ -z "$contentVersionId" ]; then
            echo "Error: Failed to upload file. No ContentVersionId found."
            exit 1
          fi
          echo "ContentVersionId: $contentVersionId"
          
          contentDocumentResponse=$(curl -X GET https://sprintparksolutionspvtltd-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
          echo "ContentDocument Response: $contentDocumentResponse"
          
          contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
          if [ -z "$contentDocumentId" ]; then
            echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
            exit 1
          fi
          echo "ContentDocumentId: $contentDocumentId"
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash
